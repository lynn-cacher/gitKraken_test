20210808
用Python调用c++外部库
c++代码

extern "C" void get_canonical_state_new_test(int (*cfg_io)[NS], int (*shift)[NSAMPLES], int nsamples, int n0, int n1)
{
    //code
}
 其中的参数是一个二维的数组指针，正常情况下要遍历cfg_io中的所有元素，只需要cfg_io[i][j]就可以。但是在本次的程序中不对，
 本次需要cfg_io[2*i][2*j]来遍历所有的数据。这个应该是python numpy中的ndarray和c++中数组指针的存储数据的方式不同导致的。

 数组指针是指向数组首元素的地址的指针，其本质为指针（这个指针存放的是数组首地址的地址，
 相当于2级指针，这个指针不可移动

数组指针（也称行指针）
定义 int (*p)[n];
()优先级高，首先说明p是一个指针，指向一个整型的一维数组，这个一维数组的长度是n，也可以说是p的步长。
也就是说执行p+1时，p要跨过n个整型数据的长度。
如要将二维数组赋给一指针，应这样赋值：
int a[3][4];
int (*p)[4]; //该语句是定义一个数组指针，指向含4个元素的一维数组。
 p=a;        //将该二维数组的首地址赋给p，也就是a[0]或&a[0][0]
 p++;       //该语句执行过后，也就是p=p+1;p跨过行a[0][]指向了行a[1][]

所以数组指针也称指向一维数组的指针，亦称行指针。


指针数组
定义 int *p[n];
[]优先级高，先与p结合成为一个数组，再由int*说明这是一个整型指针数组，它有n个指针类型的数组元素。
这里执行p+1时，则p指向下一个数组元素，这样赋值是错误的：p=a；因为p是个不可知的表示，只存在p[0]、p[1]、p[2]...p[n-1],而且它们分别是指针变量可以用来存放变量地址。但可以这样 *p=a; 这里*p表示指针数组第一个元素的值，a的首地址的值。
如要将二维数组赋给一指针数组:
int *p[3];
int a[3][4];
p++; //该语句表示p数组指向下一个数组元素。注：此数组每一个元素都是一个指针
for(i=0;i<3;i++)
p[i]=a[i]
这里int *p[3] 表示一个一维数组内存放着三个指针变量，分别是p[0]、p[1]、p[2]
所以要分别赋值。

这样两者的区别就豁然开朗了，数组指针只是一个指针变量，似乎是C语言里专门用来指向二维数组的，它占有内存中一个指针的存储空间。指针数组是多个指针变量，以数组形式存在内存当中，占有多个指针的存储空间。
还需要说明的一点就是，同时用来指向二维数组时，其引用和用数组名引用都是一样的。
比如要表示数组中i行j列一个元素：
*(p[i]+j)、*(*(p+i)+j)、(*(p+i))[j]、p[i][j]

优先级：()>[]>*



python代码








linux 编译指令
source activate pytorch
g++ -fPIC -shared -o lattice.so lattice.cpp
python test.py
linux下的动态链接库.so，不支持当前目录自动查找，只支持/usr/lib，以及其他环境变量里已经设置的目录的查找。
所以需要设置环境变量，将本地的目录添加到库目录中，或者将编译好的so文件拷贝到默认库目录中。
设置本地库目录的命令为：export LD_LIBRARY_PATH=./
设置好之后可以用env命令查看。
另一种方法可以编写一个makefile文件来实现：cp lattice.so  /usr/lib
。。



需要注意的问题
